============Quick Action Component============
<aura:component implements="force:lightningQuickActionWithoutHeader,force:hasRecordId" >
    <aura:html tag="style">
        .slds-backdrop {
        background: rgba(43, 40, 38, 0) !important;
        }
        .backgroundSpinner{
        background: rgba(0, 0, 0, 0) !important;
        }
        .modal-body {
        background: rgba(0, 0, 0, 0) !important;
        box-shadow: none !important;
        }
        .closeIcon {
        display:none !important;
        }
        .desktop {
        overflow: visible !important;
        }
    </aura:html>
    <aura:attribute name="recordId" type="String"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    <lightning:navigation aura:id="navService"/>
    
    
</aura:component>
================js controller===============
({
    doInit : function(component, event, helper) {
        console.log(component.get("v.recordId"));
        var pageReference = {
            type: 'standard__component',
            attributes: {
                componentName: 'c__MAF_SelectUnitPage',
            },
            state: {
                c__opportunityId: component.get("v.recordId")
            }
        };
        
        var navService = component.find("navService");
        //        event.preventDefault();
     /*   component.set("v.pageReference", pageReference);
        var defaultUrl = "#";
        navService.generateUrl(pageReference)
        .then($A.getCallback(function(url) {
            component.set("v.url", url ? url : defaultUrl);
        }), $A.getCallback(function(error) {
            component.set("v.url", defaultUrl);
        }));
        */
        navService.navigate(pageReference);
    }
})

====================Next Component MAF_SelectUnitPage ======================


<aura:component implements= "force:appHostable,lightning:isUrlAddressable,flexipage:availableForRecordHome,force:lightningQuickActionWithoutHeader,force:hasRecordId" access="global" 
                controller="MAF_SelectUnitController">
    
    <!--	Aura Attributes	-->
    <aura:attribute name="picklistValues" type="MAF_SelectUnitController.PicklistValues"/>
    <aura:attribute name="projectList" type="List"/>
    <aura:attribute name="phaseList" type="List"/>
    
    <aura:attribute name="searchResults" type="Unit__c[]"/>
    <aura:attribute name="columns" type="List"/>
    <aura:attribute name="selectedRowsInTable" type="List"/>
    <aura:attribute name="selectedRowsOnPage" type="List"/>
    <aura:attribute name="selectedIds" type="List"/>
    <aura:attribute name="selectedUnitList" type="List"/>
    <aura:attribute name="selectedProject" type="String"/>
    <aura:attribute name="selectedPhase" type="String"/>
    <aura:attribute name="selectedUnitType" type="String"/>
    <aura:attribute name="selectedView" type="String"/>
    <aura:attribute name="selectedPropertyType" type="String"/>
    <aura:attribute name="selectedUnitNumber" type="String"/>
    <aura:attribute name="selectedBedrooms" type="String"/>
    <aura:attribute name="minPriceRange" type="Integer" default="0" />
    <aura:attribute name="maxPriceRange" type="Integer" default="0"/>
    <aura:attribute name="noResults" type="boolean" default="false" />
    
    <aura:attribute name="opportunityId" type="String"/>
    <aura:attribute name="showSpinner" type="boolean" default="false"/>	
    <aura:attribute name="hasUnit" type="boolean" default="false"/>	
    <aura:attribute name="hasReceipt" type="boolean" default="false"/>	
    <aura:attribute name="isBulk" type="boolean" default="false"/>	
    
    <aura:attribute name="maxRowSelection" type="Integer" />
    <aura:attribute name="selectedRowsCount" type="Integer" default="0"/>
    
    <aura:attribute name="displaySearchResults" type="boolean" default="false"/>	
    
    <aura:attribute name="start" type="Integer" />
    <aura:attribute name="end" type="Integer" />
    
    <aura:attribute name="sortedBy" type="String" default="Name"/>
    <aura:attribute name="sortedDirection" type="String" default="asc" />
    <aura:attribute name="currentPageNumber" type="Integer" default="1"/>
    <aura:attribute name="selectedPageSize" type="String" default="10"/>
    <aura:attribute name="totalPages" type="String" />
    <aura:attribute name="pageList" type="List"/>
    
    
    <!--	New Data Table	-->
    
    
    <aura:attribute name="pageNumber" type="Integer" default="1"/>
    <aura:attribute name="isLastPage" type="Boolean" default="false"/>
    <aura:attribute name="resultSize" type="Integer" default="0"/> 
    <aura:attribute name="selection" type="List" />
    <aura:attribute name="hasPageChanged" type="Boolean" />
    <aura:attribute name="initialLoad" type="Boolean" default="true"/>
    <aura:attribute name="updatedRecord" type="Object[]" />
    
    
    <aura:handler event="force:refreshView" action="{!c.doInit}" />
    
    <aura:attribute name="selectedPhaseRecord" type="sObject" default="{}"/>
    <aura:attribute name="selectedUnitRecord" type="sObject" default="{}"/>
    <!--	price range attribute min max range		-->
    <aura:attribute name="minPrice" type="integer" default="250000"/>
    <aura:attribute name="maxPrice" type="integer" default="8000000"/>
    <aura:attribute name="recordId" type="String"/>
    
    <aura:handler event="c:RangeChange" action="{!c.onRangeChange}"/>
    <aura:handler name="change" value="{!v.selectedPhaseRecord}" action="{!c.handlePhaseChange}"/>
    <aura:handler name="change" value="{!v.selectedUnitRecord}" action="{!c.handleUnitChange}"/>
    <aura:handler name="change" value="{!v.selectedPropertyType}" action="{!c.handleChange}"/>
    <aura:handler name="change" value="{!v.selectedView}" action="{!c.handleChange}"/>
    <aura:handler name="change" value="{!v.selectedBedrooms}" action="{!c.handleChange}"/>
    <!--	Event Handlers		-->
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    
    <aura:html tag="style">
        <!-- Popup css start-->
        .slds-modal__container {
        width: 96%!important;
        max-width: 96%!important;
        margin:auto;
        padding:0px !important;
        }
        .slds-text-heading_medium, .slds-text-heading--medium{
        font-weight: bold;
        }
        .modal-body{
        height : 600px !important;
        max-height: 600px !important;
        }
        .cuf-content{
        padding:0px!important;
        }
        .cMAF_SelectUnitPage{
        padding-top:0px;
        padding-bottom: 0px;
        }
        .slds-modal__header{
        background: #f3f2f2;
        border-bottom: 1px solid #dddbda;
        }
        .slds-modal__footer{
        border-top: 1px solid #dddbda;
        }
        <!-- Popup css End-->
        <!-- Grid view css start -->
        
        
        .slds-grid .slds-p-around_small{
        padding-top:0px!important;
        }
        .slds-form-element__label:empty {
        margin: 0;
        display: none;
        }
        .slds-form-element__label{
        display:block;
        }
        .slds-badge_lightest{
        padding: 5px 15px;
        }
        .slds-modal__close{
        background: #a50034;
        right: -10px;
        top: -14px;
        border-radius: 50%;
        }
        <!-- Grid view css End -->
    </aura:html>
    <div class="slds-grid slds-gutters">
        <div class="slds-col slds-size_1-of-1 slds-medium-size_2-of-12 slds-large-size_2-of-12">
            <span>
                <div class="slds-grid slds-grid_vertical">
                    <div class="slds-col">
                        <span>
                            <h1 class="slds-section__title headerStyle">
                                <lightning:icon iconName="standard:account" alternativeText="" title="" />&nbsp;   Al Zahia 
                            </h1>                    
                        </span>
                    </div>
                    <div class="slds-col">
                        <span>
                            <c:MAF_SearchUnitCustomLookup aura:id="customPhaseLookup" objectAPIName="Phase__c" IconName="custom:custom37" selectedRecord="{!v.selectedPhaseRecord}" label="Phase"/>  
                        </span>
                    </div>
                    <div class="slds-col">
                        <span>
                            <lightning:select name="Property Type" label="Property Type" value="{!v.selectedPropertyType}">
                                <option value=""></option>
                                <aura:iteration items="{!v.picklistValues.propertyTypes}" var="propertyType"  >
                                    <option value="{!propertyType}">{!propertyType}</option>
                                </aura:iteration>
                            </lightning:select> 
                        </span>
                    </div>
                    <div class="slds-col">
                        <span>
                            <lightning:select name="Views" label="Views" value="{!v.selectedView}" >
                                <option value=""></option>
                                <aura:iteration items="{!v.picklistValues.views}" var="view"  >
                                    <option value="{!view}">{!view}</option>
                                </aura:iteration>
                            </lightning:select>     
                        </span>
                    </div>
                    <div class="slds-col">
                        <span>
                            <lightning:select name="Bedrooms" label="Bedrooms" value="{!v.selectedBedrooms}" >
                                <option value=""></option>
                                <aura:iteration items="{!v.picklistValues.bedRooms}" var="bedroom"  >
                                    <option value="{!bedroom}">{!bedroom}</option>
                                </aura:iteration>
                            </lightning:select>   
                        </span>
                    </div>
                    <div class="slds-col"> 
                        <span>
                            <c:MAF_SearchUnitCustomLookup aura:id="customUnitLookup" dependentObjectId="{!v.selectedPhaseRecord}" objectAPIName="Unit__c" IconName="custom:custom13" selectedRecord="{!v.selectedUnitRecord}" label="Unit"/>
                        </span>
                    </div>
                    <br/>
                    <div class="slds-col slds-p-left_x-small slds-p-right_x-small columnwidthPriceBar">
                        <span>
                            <c:MAF_PriceRange/>            
                        </span>
                    </div>
                </div>
            </span>
        </div>  
        <div class="slds-col slds-size_1-of-1 slds-medium-size_10-of-12 slds-large-size_10-of-12 verticalLine">
            <span>
                <div class="slds-modal__container containerCustomClass">
                    <article class="slds-card" style="background: transparent;border: none;box-shadow: none;">
                        <aura:if isTrue="{!v.showSpinner}">
                            <div class="exampleHolder">
                                <lightning:spinner alternativeText="Loading" size="large" />
                            </div>
                        </aura:if>
                        <div class="mainDivClass">
                            <aura:if isTrue="{!v.hasUnit}">
                                <div class="slds-text-color_destructive slds-text-heading_medium headerStyle"><b>This Opportunity already has associated unit.</b></div>
                                <br/> 
                            </aura:if>
                            <aura:if isTrue="{!v.displaySearchResults}">
                                
                                <div class="tableClass">
                                    <div style="text-align: right">
                                        <lightning:button variant="brand" disabled = "{!v.hasReceipt}" label="Add Selected Units" title="Add Selected Units" onclick="{! c.addSelectedUnits }" />
                                        <lightning:button variant="brand" label="Available Unit Report" title="Available Unit Report" onclick="{! c.viewReport }" />
                                    </div>
                                    <br/>
                                    <lightning:datatable
                                                         columns="{! v.columns }"
                                                         data="{! v.searchResults }"
                                                         keyField="Id"
                                                         maxRowSelection="{! v.maxRowSelection }"
                                                         hideCheckboxColumn="false"
                                                         selectedRows = "{!v.selection}"
                                                         onrowaction="{! c.handleRowAction }"
                                                         sortedBy="{!v.sortedBy}"
                                                         sortedDirection="{!v.sortedDirection}"
                                                         onsort="{!c.updateColumnSorting}"
                                                         onrowselection ="{!c.onRowSelection}"/> 
                                </div>
                                <aura:set attribute="else">
                                    <div style="text-align: center">
                                        <br/>
                                        No record to show.
                                        <br/>
                                    </div>
                                </aura:set>
                            </aura:if> 
                        </div>
                    </article>
                </div>
            </span>
        </div>
    </div>
    
</aura:component>
=======================js controller======================

({
    doInit : function(component, event, helper) {
        console.log('INIT ');
        component.set("v.showSpinner",true); 
        component.set('v.columns', [
            {label: 'Location Code', fieldName: 'linkName', type: 'url', typeAttributes: { label: { fieldName: 'Name' }, target:'_blank'} },
            {label: 'Phase', fieldName: 'Phase_Name__c', type: 'text',sortable: true},
            {label: 'Status', fieldName: 'Status__c', type: 'text',sortable: true},
            {label: 'Unit Price', fieldName: 'Unit_Price__c', type: 'number',sortable: true},
            {label: 'Bedrooms', fieldName: 'Bedrooms__c', type: 'text',sortable: true},
            {label: 'Unit Type', fieldName: 'Unit_Type__c', type: 'text',sortable: true},
            {label: 'Unit Number', fieldName: 'Unit_Number__c', type: 'number',sortable: true},
            {label: 'Unit View', fieldName: 'Unit_View__c', type: 'text',sortable: true}
        ]);
        helper.init(component, event, helper);
        helper.searchProperties(component, event, helper);
        
    },
    
    handleSearchProperties : function(component, event, helper) {
        
                helper.searchProperties(component, event, helper);
            //    var button = component.find("collapsibleBttn");
            //    console.log(button.get('v.state'));
            //    var sectionContainer = component.find('collapsibleSectionContainer');
            //    $A.util.removeClass(sectionContainer, "slds-is-open");
    },
    
    updatePhaseList : function(component, event, helper) {
        component.set("v.showSpinner",true);
        helper.updatePhaseListHelper(component, event, helper);
    },
    
    handleResetProperties : function(component, event, helper){
        helper.reset(component,event,helper);
    },
    
    
    addSelectedUnits : function(component, event, helper){
         component.set("v.showSpinner",true);
        helper.updateUnits(component, event, helper);
    },
    
    handleCancel : function(component, event, helper){
        var oppId = component.get("v.recordId");
        
        window.open("/"+oppId,"_self");
        
    },
    updateSelectedText: function (cmp, event) {
        var selectedRows = event.getParam('selectedRows');
        cmp.set("v.selectedRowsOnPage",selectedRows);
        console.log('selectedRows ',selectedRows );
        cmp.set('v.selectedRowsCount', selectedRows.length);
    },
    
    updateColumnSorting: function( cmp, event, helper) {
        console.log('=== SORTING ');
        cmp.set("v.sortedDirection", event.getParam("sortDirection"));
        cmp.set("v.sortedBy", event.getParam("fieldName") );
        helper.searchProperties( cmp, event,helper );
    },
    /**
     * This method will keep record of all selected rows
     * */
    onRowSelection : function(component, event, helper) {
        // Avoid any operation if page has changed
        // as this event will be fired when new data will be loaded in page 
        // after clicking on next or prev page
        
        if((!component.get("v.hasPageChanged") || !component.get("v.isBulk")) || component.get("v.initialLoad")){
            //set initial load to false
            component.set("v.initialLoad", false);
            //Get currently select rows, This will only give the rows available on current page
            var selectedRows = event.getParam('selectedRows');
            
            //Get all selected rows from datatable, this will give all the selected data from all the pages
            var allSelectedRows = component.get("v.selection");
            
            //Get current page number
            var currentPageNumber = component.get("v.pageNumber");
            
            //Process the rows now
            //Condition 1 -> If any new row selected, add to our allSelectedRows attribute
            //Condition 2 -> If any row is deselected, remove from allSelectedRows attribute
            //Solution - Remove all rows from current page from allSelectedRows attribute and then add again
            
            //Removing all rows coming from curent page from allSelectedRows
            var i = allSelectedRows.length;
            while (i--) {
                var pageNumber = allSelectedRows[i].split("-")[1];
                if (pageNumber && pageNumber == currentPageNumber) { 
                    allSelectedRows.splice(i, 1);
                } 
            }
            
            //Adding all the new selected rows in allSelectedRows
            selectedRows.forEach(function(row) {
                allSelectedRows.push(row.Id);
            });
            
            //Setting new value in selection attribute
            component.set("v.selection", allSelectedRows);
        } else{
            component.set("v.hasPageChanged", false);
        }
    },
    
    handleSectionHeaderClick : function(component, event, helper) {
        var button = event.getSource();
        var sectionContainer = component.find('collapsibleSectionContainer');
        $A.util.toggleClass(sectionContainer, "slds-is-open");
    },
    
    updateSelectedUnits : function(component,event,helper){
        
    },
    handlePhaseChange : function(component, event, helper) {
        var selectedPhaseId=event.getParam('value');
        helper.searchProperties(component, event, helper);
    },
    handleUnitChange : function(component, event, helper) {
        var selectedUnitId=event.getParam('value');
        helper.searchProperties(component, event, helper);
    },
    handleChange : function(component, event, helper) {
        helper.searchProperties(component, event, helper);
    },
    
    onRangeChange: function(component, event, helper) {
        component.set("v.minPrice", event.getParam("minValue"));
        component.set("v.maxPrice", event.getParam("maxValue"));
        helper.searchProperties(component, event, helper);
    },
    viewReport: function(component, event, helper) {
        window.open('https://mafpcommunities--new.lightning.force.com/lightning/r/Report/00O1w000000LQ0pEAG/view','_blank');
        
    },
    
})

===================helper======================



({
    init : function(component, event, helper) {
        var pageReference = component.get("v.pageReference");
		//component.set("v.opportunityId", pageReference.state.c__opportunityId); 
       // alert('recordId' + component.get("v.recordId"));
        var action = component.get("c.getIntitialPicklistValues");
        action.setParams({ 
            oppId : component.get("v.recordId")
        });
        action.setCallback(this, function(response) {
            component.set("v.showSpinner",false);
            console.log('Response returned');
            var state = response.getState();
            if (state === "SUCCESS") {
                console.log(response.getReturnValue());
                var retrurnValue = response.getReturnValue();
                console.log(retrurnValue.projects);
                console.log('retrurnValue.hasUnit ',retrurnValue.hasUnit);                
                console.log('retrurnValue.hasReceipt ',retrurnValue.hasReceipt);                
                component.set("v.hasReceipt",retrurnValue.hasReceipt);  
                console.log('retrurnValue.recordType ',retrurnValue.recordType);
                if(retrurnValue.recordType == 'Bulk'){
                    component.set("v.isBulk",true);
                    var addBulkButton = component.find("addBulkUnitButton");
                    console.log(addBulkButton);
                    // by using $A.util.toggleClass add-remove slds-hide class
                    $A.util.toggleClass(addBulkButton, "slds-hide");
                    console.log('Setting true');
                }else{
                    component.set("v.maxRowSelection",1);
                    
                }
                if(retrurnValue.hasUnit){
                    component.set("v.hasUnit",true);    
                }
                
                
                console.log('Bulk ',component.get("v.isBulk"));
                component.set("v.picklistValues",retrurnValue);
                console.log(component.get("v.picklistValues"));
            }
            else if (state === "ERROR") {
                console.log('Error');
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        console.log("Error message: " + 
                                    errors[0].message);
                        alert('Something went wrong. Please contact your system admin with error message :  '+errors[0].message);
                    }
                } else {
                    console.log("Unknown error");
                }
                
            }
            
        });
        
        $A.enqueueAction(action);
    },
    
    searchProperties : function(component, event, helper) {
        component.set("v.showSpinner",true);        
        var selectedPhaseId=component.get("v.selectedPhaseRecord.Id");
        var selectedUnitId=component.get("v.selectedUnitRecord.Id");
        var minPriceRange = component.get("v.minPrice");
        var maxPriceRange = component.get("v.maxPrice");
        var selectedView = component.get("v.selectedView");
        var selectedUnitPropertyType = component.get("v.selectedPropertyType");
        var selectedBedrooms = component.get("v.selectedBedrooms");
        var sortby = component.get("v.sortedBy"); 
        var sortOrder = component.get("v.sortedDirection");
        
        var action = component.get("c.searchPropertiesApex");
        
        console.log('selectedPhaseId',selectedPhaseId);    
        console.log('selectedUnitId',selectedUnitId);       
        console.log('minPriceRange',minPriceRange);       
        console.log('maxPriceRange',maxPriceRange);       
        console.log('selectedView',selectedView);       
        console.log('selectedUnitPropertyType',selectedUnitPropertyType);       
        console.log('selectedBedrooms',selectedBedrooms);     
        action.setParams({ 
            sortby: sortby,
            sortOrder: sortOrder,
            minPriceRange:minPriceRange,
            maxPriceRange:maxPriceRange,
            selectedView:selectedView,
            selectedUnitPropertyType:selectedUnitPropertyType,
            selectedBedrooms:selectedBedrooms,
            selectedPhaseId:selectedPhaseId,
            selectedUnitId:selectedUnitId
        });
        
        
        action.setCallback(this, function(response) {
            component.set("v.showSpinner",false);
            
            console.log('Response returned');
            var state = response.getState();
            if (state === "SUCCESS") {
                console.log(response.getReturnValue());
                var retrurnValue = response.getReturnValue();
                console.log(retrurnValue);
                response.getReturnValue().forEach(function(row) {
                    var unitId = row.Id;
                    var recordId = unitId.split("-")[0];
                    row.linkName = '/'+recordId;
                });
                
                console.log('Setting results');
              //  alert('response '+response.getReturnValue());
                component.set("v.searchResults", response.getReturnValue());
                if(retrurnValue.length > 0){
                    
                    component.set("v.displaySearchResults",true);
                }
                
            }
            else if (state === "ERROR") {
                console.log('Error');
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        console.log("Error message: " + 
                                    errors[0].message);
                        alert('Something went wrong. Please contact your system admin with error message :  '+errors[0].message);
                    }
                } else {
                    console.log("Unknown error");
                }
                
            }
            
        });
        
        $A.enqueueAction(action);
        
    },
    
    updateUnits : function(component, event, helper) {
        var oppId = component.get("v.recordId");
        var hasUnit = component.get("v.hasUnit");
        var action = component.get("c.addUnitsNew");
        var selectedUnitList = [];
        var isBulk = component.get("v.isBulk");
        selectedUnitList = component.get("v.selection");
        console.log(selectedUnitList);
        
        if(selectedUnitList.length == 0){
            alert('Please select units');
        }else{ 
            component.set("v.showSpinner",true);
            console.log('selectedUnitList ',selectedUnitList);
            component.set("v.showSpinner",false);
            console.log('Adding');
            action.setParams({ oppId1 : oppId,
                              unitId : selectedUnitList,
                              isBulk : isBulk,
                              hasUnit : hasUnit});
            action.setCallback(this, function(response) {
                component.set("v.showSpinner",false);
                console.log('Response returned');
                var state = response.getState();
                if (state === "SUCCESS") {
                    window.open("/"+oppId,"_self");
                    //                $A.get('e.force:refreshView').fire();
                    //window.location.reload();
                }
                else if (state === "ERROR") {
                    console.log('Error');
                    var errors = response.getError();
                    if (errors) {
                        if (errors[0] && errors[0].message) {
                            console.log("Error message: " + 
                                        errors[0].message);
                            alert('Something went wrong. Please contact your system admin with error message :  '+errors[0].message);
                        }
                    } else {
                        console.log("Unknown error");
                    }
                }
            });
            $A.enqueueAction(action);
        }
    },
    reset : function(component,event, helper){
        
        var blankList = [];
        component.set("v.selectedPhaseRecord",null);
        component.set("v.selectedUnitRecord",null);
        component.set("v.searchResults",blankList);
        component.set("v.paginationList",blankList);
        
        component.set("v.minPrice","250000");
        component.set("v.maxPrice","8000000");
        component.set("v.selectedView","");
        component.set("v.selectedPropertyType","");
        component.set("v.selectedBedrooms","");
        component.set("v.locationCode","");
        
        component.set("v.displaySearchResults",false);
        var callPhaseCmp = component.find('customPhaseLookup');
        callPhaseCmp.callChild();
        
        var callUnitCmp = component.find('customUnitLookup');
        callUnitCmp.callChild();
        
    },
})

======================style.css==========================


.THIS .slds-col {
    padding: 0px 5px 5px;
}

.THIS.exampleHolder{
    position: relative;
    display: inline-block;
    width: 80px;
    height: 80px;
}
.THIS .slds-button_neutral {
    justify-content : left !important;
}

.THIS .rangeCmp{
    padding-left: 23px !important;
}
.THIS .columnwidth{
    width: 20%;
}
.THIS .columnwidthPriceBar{
    padding: 0px 20px 0px 20px; 
    width: 100%;
}
.THIS .searchWidth{
    width: 55% !important;
    background-color: #a50034;
    color: #FFF;
}
.THIS .clearClass{
    color: #a50034;
    padding-top: 35px;
    text-align: right;
    font-weight: bold;
    right: 30px;
    position: absolute;
    top: 105px;
}
.THIS .tableClass{
    width: 100%;
 /*   margin:auto;  */
    height:510px;
    overflow:hidden;

}
.THIS .slds-scrollable_y{
    height:420px !important;
}
.THIS.containerCustomClass {
    width: 100%!important;
    max-width: 100%!important;
    margin:auto;
    padding:0px !important;
}
.THIS .slds-modal__container {
    width: 99%!important;
    max-width: 99%!important;
}
.THIS .verticalLine {
    border-left: thick solid #c1c1c1;
    height: 100%;
}
.THIS .slds-table th, .THIS .slds-table td {
    border-left: 1px solid rgba(154, 150, 150, 0.7);
}

.THIS .headerStyle{
    background: #f3f2f2;
    padding: 5px;
    border-radius: 5px;
    font-size: 18px;
}

=====================apex controller=======================


public class MAF_SelectUnitController {
    
    public static final String  FIRST_VALUE = '-- None --';
    public static ApexPages.StandardSetController ssc;
    
    @auraEnabled
    public static PicklistValues getIntitialPicklistValues(String oppId){
        
        PicklistValues toReturn = new PicklistValues();
        List<Project__c> projectList = new List<Project__c>();
        projectList = [SELECT Id,Name FROM Project__c ORDER BY Name LIMIT 50000];
        Map<String,String> ProjectMap = new Map<String,String>();
        Opportunity opp = [SELECT Id,Name,Unit__c,recordtype.Name,Total_Receipt_Amount__c,substage__c FROM Opportunity WHERE ID =: oppId];
        
        
        if((opp.substage__c=='Booking Pending' || opp.substage__c=='Booking Approved' || opp.substage__c=='Reservation Pending' || opp.substage__c=='Reservation Approved' || opp.substage__c=='Purchase Pending' || opp.substage__c=='Purchase Approved')||(opp.Total_Receipt_Amount__c > 0 && opp.Total_Receipt_Amount__c!=null)){
            toReturn.hasReceipt = true;
            
        }else{
            toReturn.hasReceipt = false;
        }
        if(opp.Unit__c != null){
            toReturn.hasUnit = true;
        }
        else{
            toReturn.hasUnit = false;
        }
        system.debug('toReturn.hasUnit '+toReturn.hasUnit);
        toReturn.recordType = opp.RecordType.Name;
        toReturn.projects = createMap('Name',projectList);
        toReturn.phases =   createMap('',new List<sObject>());
        toReturn.bedRooms  = getPickValues(new Unit__c(), 'Bedrooms__c', ''); 
        toReturn.unitTypes = getPickValues(new Unit__c(), 'Unit_Type__c', ''); 
        toReturn.views = getPickValues(new Unit__c(), 'Unit_View__c', ''); 
        toReturn.propertyTypes = getPickValues(new Unit__c(), 'Property_Type__c', ''); 
        toReturn.bedRooms.sort();
        toReturn.unitTypes.sort();
        toReturn.views.sort();
        toReturn.propertyTypes.sort();
        
        system.debug('toReturn '+toReturn);
        return toReturn;
    }
    
    public static Map<String,String> createMap(String fieldName,List<sObject> objectList){
        Map<String,String> mapToReturn = new Map<String,String>();
        for(sObject obj : objectList){
            mapToReturn.put(String.valueOf(obj.get('Id')), String.valueOf(obj.get(fieldName)));
            system.debug('obj '+obj.get(fieldName));
        }   
        system.debug('mapToReturn '+mapToReturn);
        return mapToReturn;
    }
    
    @AuraEnabled
    public static void addUnitsNew(String oppId1,List<String> unitId, boolean isBulk,boolean hasUnit){
        system.debug('oppId1 '+oppId1);
        system.debug('unitId '+unitId);
        system.debug('hasUnit '+hasUnit);
        if(isBulk){
            List<Unit__c> unitsToUpdate = new List<Unit__c>();
            for(String uId : unitId){
                if(uId != null){
                    String finalString = uId.split('-')[0];
                    Unit__c u = new Unit__c();
                    u.Bulk_Opportunity__c = oppId1;
                    u.Id = finalString;
                    unitsToUpdate.add(u);
                }
            }
            system.debug(unitsToUpdate);
            if(unitsToUpdate.size() > 0){
                Update unitsToUpdate;
            } 
            Opportunity recOpp = [Select Id,Selling_Amount__c,amount,payment_plan__c,phase__c,Unit__r.Unit_Type__c,Discount_Amount__c from opportunity where Id =:oppId1];
            List<Discount_offer__c> disOfrlist  = [SELECT Id,Discount_Value__c,Discount_Amount__c FROM Discount_offer__c where Opportunity__c =:oppId1];
            Decimal totalDiscount = 0;
            if(disOfrlist.size() > 0){
                for(Discount_offer__c dofr : disOfrlist){
                    dofr.Discount_Amount__c = recOpp.amount * (dofr.Discount_Value__c/100);
                    totalDiscount +=dofr.Discount_Amount__c;
                }
                
                recOpp.Discount_Amount__c = totalDiscount > 0 ? totalDiscount:recOpp.Discount_Amount__c;
                recOpp.Selling_Amount__c = recOpp.Selling_Amount__c -  (totalDiscount > 0 ? totalDiscount:recOpp.Discount_Amount__c);
                update recOpp;            
            }            
            
        }else{
            if(unitId.size() > 0){	
                String finalString = unitId.get(0).split('-')[0];
                Unit__c u = [SELECT Id,Unit_Type__c,Name,Unit_Number__c,Phase__c,Unit_Price__c,Vat_Rate_Code__c,Vat_Rate_Code__r.Percentage_Rate__c
                             FROM Unit__c 
                             WHERE Id=:finalString];
                
                Opportunity recOpp = [Select Id,payment_plan__c,phase__c,Unit__r.Unit_Type__c from opportunity where Id =:oppId1];
                Opportunity opp;
                opp = new Opportunity(Id=oppId1);
                opp.amount = u.Unit_Price__c;
                opp.Unit__c = u.Id;
                opp.Selling_Amount__c = u.Unit_Price__c; 
                opp.Discount_Amount__c = 0;
                if(hasUnit ){
                    List<Discount_offer__c> disOfrlist  = [SELECT Id,Discount_Value__c,Discount_Amount__c FROM Discount_offer__c where Opportunity__c =:oppId1];
                    if(u.Phase__c == recOpp.Phase__c){
                        Decimal totalDiscount = 0;
                        for(Discount_offer__c dofr : disOfrlist){
                            dofr.Discount_Amount__c = opp.amount * (dofr.Discount_Value__c/100);
                            totalDiscount +=dofr.Discount_Amount__c;
                        }
                        if(disOfrlist.size()>0){
                            opp.Selling_Amount__c = u.Unit_Price__c - totalDiscount;
                            opp.Discount_Amount__c = totalDiscount;
                            opp.Payment_Plan__c = recOpp.Payment_Plan__c;
                            DiscountCalculationHandler.RUNTRIGGER = false;
                            update disOfrlist;
                        }
                        if(recOpp.Unit__r.Unit_Type__c != u.Unit_Type__c){
                            List<Opportunity_Unit_Option__c> untOpt = [Select Id from Opportunity_Unit_Option__c where Opportunity__c = :oppId1];
                            if(untOpt.size() > 0){
                                //OpportunityUnitOptionHandler.RUNUNITUPGRADE = false;
                                delete untOpt;
                            }
                        }
                    }
                    else{
                        opp.Payment_Plan__c = null;
                        List<Opportunity_Unit_Option__c> untOpt = [Select Id from Opportunity_Unit_Option__c where Opportunity__c = :oppId1];
                        if(untOpt.size() > 0){
                            // OpportunityUnitOptionHandler.RUNUNITUPGRADE = false;
                            delete untOpt;
                        }
                        List<Opportunity_Charge__c> opCharge = [Select Id from Opportunity_Charge__c where Opportunity__c =:oppId1];
                        system.debug('------>'+opCharge);
                        if(opCharge.size() > 0){
                            //MAF_OpportunityChargeTriggerHandler.RUNTRIGGER = false;
                            delete opCharge;
                        }
                        if(disOfrlist.size() > 0){
                            DiscountCalculationHandler.RUNTRIGGER = false;
                            delete disOfrlist;
                        }
                    }
                }
                system.debug('--->'+u.name);
                if(u.Unit_Number__c != null){
                    opp.Unit_Number__c = u.Unit_Number__c ;
                }
                opp.Phase__c =u.Phase__c;
                try{
                    Update opp;
                }catch(DmlException ex){
                    throw new AuraHandledException(ex.getDmlMessage(0));
                }
            }
        }
    }
    
    @AuraEnabled
    public static List<Unit__c> searchPropertiesApex(String sortby, String sortOrder,Integer minPriceRange, Integer maxPriceRange, String selectedView,String selectedUnitPropertyType,String selectedBedrooms, String selectedPhaseId, String selectedUnitId){
        //, String sortBy, String sortOrder
        String soql = 'SELECT Id,Name,Unit_Price__c,Bedrooms__c,Phase__c,Phase__r.Name,Phase_Name__c,Unit_Type__c,Unit_Number__c,Unit_View__c,Property_Type__c,Status__c,Location_Code__c FROM Unit__c WHERE  Status__c = \'Available\' AND IsActive__c=TRUE  AND Project__c =\'Al Zahia\' ';
        
        if(String.isNotBlank(selectedPhaseId)){
            system.debug('*selectedPhaseId**'+selectedPhaseId);
            soql+=' AND Phase__c=:selectedPhaseId';
        }
        
        if(minPriceRange != null){
            system.debug('minPriceRange '+minPriceRange);
            soql += ' AND Unit_Price__c >= : minPriceRange ';
            
        }
        if(maxPriceRange != null){
            system.debug('maxPriceRange '+maxPriceRange);
            soql += ' AND Unit_Price__c <= : maxPriceRange ';
            
        }
        if(String.isNotBlank(selectedBedrooms)){
            system.debug('selectedBedrooms '+selectedBedrooms);
            soql += ' AND Bedrooms__c = : selectedBedrooms ';
            
        }
        if(String.isNotBlank(selectedUnitId)){
            system.debug('selectedUnitId '+selectedUnitId);
            soql += ' AND Id = : selectedUnitId ';
            
        }
        if(String.isNotBlank(selectedView)){
            system.debug('selectedView '+selectedView);
            soql += ' AND Unit_View__c = : selectedView ';
            
        }
        if(String.isNotBlank(selectedUnitPropertyType)){
            system.debug('selectedUnitPropertyType '+selectedUnitPropertyType);
            soql += ' AND Property_Type__c = : selectedUnitPropertyType ';
            
        }
        
        system.debug('sortby '+sortby);
        system.debug('sortOrder '+sortOrder);
        
        //  LIMIT :Integer.valueOf(ps) OFFSET :(ps*pn)
        if( sortby != NULL && sortOrder != NULL  ){
            soql += ' ORDER BY '+ sortby+' '+ sortOrder+' NULLS LAST';
        }
        system.debug('****QUERY SOQL****'+soql);
        List<Unit__c> listToDisplay =  Database.Query(soql);
        system.debug('listToDisplay '+listToDisplay);
        system.debug('listToDisplay size'+listToDisplay.size());
        return listToDisplay;
    }
    
    public static List<String> getValues(String fieldName, List<sObject> objectList ){
        List<String> listToReturn = new List<String>();
        listToReturn.add(FIRST_VALUE);
        for(sObject obj : objectList){
            system.debug('obj '+obj.get(fieldName));
            listToReturn.add(String.valueOf(obj.get(fieldName)));
        }
        return listToReturn;
    }   
    
    public static List<String> getPickValues(Sobject object_name, String field_name, String first_val) {
        List<String> options = new List<String>(); //new list for holding all of the picklist options
        /*        if (first_val != null) { //if there is a first value being provided
options.add(FIRST_VALUE); //add the first option
}
*/
        Schema.sObjectType sobject_type = object_name.getSObjectType(); //grab the sobject that was passed
        Schema.DescribeSObjectResult sobject_describe = sobject_type.getDescribe(); //describe the sobject
        Map<String, Schema.SObjectField> field_map = sobject_describe.fields.getMap(); //get a map of fields for the passed sobject
        List<Schema.PicklistEntry> pick_list_values = field_map.get(field_name).getDescribe().getPickListValues(); //grab the list of picklist values for the passed field on the sobject
        for (Schema.PicklistEntry a : pick_list_values) { //for all values in the picklist list
            options.add(a.getLabel()); //add the value and label to our final list
        }
        system.debug('options '+options);
        return options; //return the List
    }
    
    public class PicklistValues{
        
        @AuraEnabled public Map<String,String> projects;
        @AuraEnabled public Map<String,String> phases;
        @AuraEnabled public List<String> unitTypes;
        @AuraEnabled public List<String> views;
        @AuraEnabled public List<String> propertyTypes;
        @AuraEnabled public List<String> bedRooms;
        @AuraEnabled public boolean hasUnit;
        @AuraEnabled public boolean hasReceipt;
        @AuraEnabled public String recordType;
        public PicklistValues(){
            projects = new Map<String,String>();
            phases = new Map<String,String>();
            unitTypes = new List<String>();
            views = new List<String>();
            propertyTypes = new List<String>();
            hasUnit = false;
            hasReceipt=false;
        }
        
    }
}